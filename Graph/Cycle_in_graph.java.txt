/*Q : Given an directed graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such 
that there is a edge directed from node B[i][0] to node B[i][1].
Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.

NOTE:
The cycle must contain atleast two nodes.
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.*/

//Solution

public class Solution {
    static int maxn = 100009;
    static ArrayList < ArrayList < Integer > > adj;
    static int[] visited = new int[maxn];
    static int[] recStack = new int[maxn];
    public static void graph() {
        adj = new ArrayList < ArrayList < Integer > > (maxn);
        for (int i = 0; i < maxn; i++) {
            visited[i] = 0;
            recStack[i] = 0;
            adj.add(new ArrayList < Integer > ());
        }
    }
    public int solve(int A, int[][] B) {
        graph();
        for (int[] row: B)
            adj.get(row[0]).add(row[1]);
        int flag = 0;
        for (int i = 1; i <= A; i++) {
            if (visited[i] == 0 && isCyclicUtil(i) == true)
                return 1;
        }
        return 0;
    }
    public static boolean isCyclicUtil(int v) {
        if (visited[v] == 0) {
            // Mark the current node as visited and part of recursion stack
            visited[v] = 1;
            recStack[v] = 1;
            // Recur for all the vertices adjacent to this vertex
            for (int u: adj.get(v)) {
                if (visited[u] == 0 && isCyclicUtil(u) == true)
                    return true;
                else if (recStack[u] == 1)
                    return true;
            }
        }
        recStack[v] = 0; // remove the vertex from recursion stack
        return false;
    }
}